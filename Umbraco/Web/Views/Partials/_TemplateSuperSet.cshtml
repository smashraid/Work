@using umbraco.BusinessLogic
@using umbraco.cms.businesslogic.web
@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@{
    var id = Request.QueryString["id"];
    Document workout = new Document(Convert.ToInt32(id));
    int workoutId = workout.Id;
    User user = umbraco.BusinessLogic.User.GetCurrent();
    user = new User(0);
    Dictionary<string, string> model = new Dictionary<string, string>
        {
            {"gymnastid", workout.ParentId.ToString()},
            {"memberid", user.Id.ToString()},
            {"workoutid", id},
            {"workouttitle", workout.Text}
        };
}
<style>
    body
    {
        font-size: 62.5%;
    }
    label, input
    {
        display: block;
    }
    input.text
    {
        margin-bottom: 12px;
        width: 95%;
        padding: .4em;
    }
    fieldset
    {
        padding: 0;
        border: 0;
        margin-top: 25px;
    }
    h1
    {
        font-size: 1.2em;
        margin: .6em 0;
    }
    div#content-superset
    {
        width: 350px;
        margin: 20px 0;
    }
    div#content-superset table
    {
        margin: 1em 0;
        border-collapse: collapse;
        width: 100%;
    }
    div#content-superset table td, div#content-superset table th
    {
        border: 1px solid #eee;
        padding: .6em 10px;
        text-align: left;
    }
    .ui-dialog .ui-state-error
    {
        padding: .3em;
    }
    .validateTips
    {
        border: 1px solid transparent;
        padding: 0.3em;
    }
    .inlineField {
        float: left; 
        display: inline
    }
</style>
<div id="content-superset" class="ui-widget">
    <h1>@workout.Text</h1>
    <table id="users" class="ui-widget ui-widget-content">
        <caption>
            <button class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-primary" data-bind="click: openModalSuperSet">
                <span class="ui-button-icon-primary ui-icon ui-icon-plus"></span><span class="ui-button-text">Add</span>
            </button>
            <button class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-primary" data-bind="click: getSuperSet">
                <span class="ui-button-icon-primary ui-icon ui-icon-refresh"></span><span class="ui-button-text">Refresh</span>
            </button>
            <br/>
            <br/>
        </caption>
        <thead>
            <tr class="ui-widget-header ">
                <th>
                    
                </th>
                <th>
                    Sets
                </th>
                <th>
                    Reps
                </th>
                <th>
                    Resistance
                </th>
                <th>
                    Unit
                </th>
                <th>
                </th>
            </tr>
        </thead>
        <tbody data-bind="foreach: supersets">
            <tr>
                <td >
                    <span data-bind="value: IsHide"></span>
                    <a href="#" data-bind="click: $root.showRoutine, visible: IsHide"> <i class="ui-icon ui-icon-carat-1-e"></i></a>
                    <a href="#" data-bind="click: $root.hideRoutine, visible: !IsHide()"><i class="ui-icon ui-icon-carat-1-s"></i></a>
                </td>
                <td data-bind="text: SuperSet.Sets">
                </td>
                <td data-bind="text: SuperSet.Reps">
                </td>
                <td data-bind="text: SuperSet.Resistance">
                </td>
                <td data-bind="text: SuperSet.Unit">
                </td>
                <td>
                    <button type="button" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" title="Edit" data-bind="click: $root.editSuperSet">
                        <i class="ui-icon ui-icon-pencil"></i>
                    </button>
                    <button type="button" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" title="Delete" data-bind="click: $root.deleteSuperSet">
                        <i class="ui-icon ui-icon-trash"></i>
                    </button>
                    <button type="button" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" title="Add Routine" data-bind="click: $root.openModal">
                        <i class="ui-icon ui-icon-plus"></i>
                    </button>
                </td>  
            </tr>  
            <tr data-bind="visible: !IsHide()">
                <td> <i class="ui-icon ui-icon-arrowreturnthick-1-e"></i> </td>     
                <td colspan="5">
                    <div class="ui-widget">
                        <table class="ui-widget ui-widget-content">
                            <caption>
                            </caption>
                            <thead>
                                <tr class="ui-widget-header ">
                                    <th>
                                        Id
                                    </th>
                                    <th>
                                        Exercise
                                    </th>
                                    <th>
                                        Sets
                                    </th>
                                    <th>
                                        Reps
                                    </th>
                                    <th>
                                        Resistance
                                    </th>
                                    <th>
                                        Unit
                                    </th>
                                    <th>
                                    </th>
                                </tr>
                            </thead>
                            <tbody data-bind="foreach: Routines">
                                <tr>
                                    <td data-bind="text: Routine.Id">
                                    </td>
                                    <td data-bind="text: Routine.Exercise.ExerciseName">
                                    </td>
                                    <td data-bind="text: Routine.Sets">
                                    </td>
                                    <td data-bind="text: Routine.Reps">
                                    </td>
                                    <td data-bind="text: Routine.Resistance">
                                    </td>
                                    <td data-bind="text: Routine.Unit">
                                    </td>
                                    <td>
                                        <button type="button" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only"
                                                title="Edit" data-bind="click: $root.editRoutine">
                                            <i class="ui-icon ui-icon-pencil"></i>
                                        </button>
                                        <button type="button" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only"
                                                title="Delete" data-bind="click: $root.deleteRoutine">
                                            <i class="ui-icon ui-icon-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </td>
            </tr>
        </tbody>
    </table>


    <div id="dialog-routinesuperset">
        <form data-bind="submit: saveRoutine">
            <fieldset>
                <legend></legend>
                <div data-bind="foreach: newRoutines">
                    <label>Category *</label>
                    <select data-bind='options: $root.categories, optionsText: "Value", optionsValue: "Id", optionsCaption: "CATEGORY", value: Routine.CategoryId, uniqueName: true' required="">
                    </select>
                    <input type="hidden" data-bind="text: Routine.Id" />
                    <label>Exercise *</label>
                    <select data-bind='options: Routine.exercises, optionsText: "ExerciseName", optionsValue: "Id", optionsCaption: "EXERCISE", value: Routine.ExerciseId, uniqueName: true' required="">
                    </select>
                    <label>Resistance *</label>
                    <input type="text" data-bind="value: Routine.Resistance" class="inlineField" required="" placeholder="RESISTANCE" />
                    <select data-bind='options: $root.units, optionsText: "Value", optionsValue: "Id", optionsCaption: "UNIT", value: Routine.UnitId' >
                    </select>
                    <label>Sets *</label>
                    <input type="text" data-bind="value: Routine.Sets" required="" placeholder="SETS" />
                    <label>Reps *</label>
                    <input type="text" data-bind="value: Routine.Reps" required="" placeholder="REPS" />
                    <label>Note *</label>
                    <textarea placeholder="NOTE" rows="5" cols="30" data-bind="value: Routine.Note" required="" ></textarea>
                </div>
            </fieldset>
        </form>
    </div>

    <div id="dialog-superset">
        <form data-bind="submit: saveSuperSet">
            <fieldset>
                <legend></legend>
                <div data-bind="with: superset">
                    <label>
                        Resistance *</label>
                    <select data-bind='options: $root.resistances, optionsText: "Value", optionsValue: "Id", optionsCaption: "...", value: ResistanceId'>
                    </select>
                    <select data-bind='options: $root.units, optionsText: "Value", optionsValue: "Id", optionsCaption: "...", value: UnitId'>
                    </select>
                    <label>
                        Sets *</label>
                    <input type="text" data-bind="value: Sets" required="" />
                    <label>
                        Reps *</label>
                    <input type="text" data-bind="value: Reps"  required=""/>
                    <label>
                        Note *</label>
                    <textarea placeholder="Note" rows="5" cols="30" data-bind="value: Note" required=""></textarea>
                </div>
            </fieldset>
        </form>
    </div>
</div>

<link href="/css/ui/jquery.ui.css" rel="stylesheet" type="text/css" />
@*<script src="/scripts/jquery.js" type="text/javascript"></script>
<script src="/scripts/jquery.ui.js" type="text/javascript"></script>
<script src="/scripts/knockout.js" type="text/javascript"></script>
<script src="/scripts/knockout.mapping.js" type="text/javascript"></script>*@
<script type="text/javascript">
    function StoryViewModel2(trainingid) {
        var self = this;
        self.Id = ko.observable();
        self.ActionId = ko.observable();
        self.Action = ko.observable();
        self.TrainingId = ko.observable(trainingid);
        self.Training = ko.observable();
        self.UnitId = ko.observable();
        self.Unit = ko.observable();
        self.ObjectId = ko.observable();
        self.ObjectType = ko.observable();
        self.Value = ko.observable();
        self.TypeId = ko.observable();
        self.Type = ko.observable();
        self.UserId = ko.observable();
        self.UserType = ko.observable();
        self.Note = ko.observable();
        self.CreatedDate = ko.observable();
        self.UpdatedDate = ko.observable();
    }

    function SuperSetViewModel2() {
        var self = this;
        self.Id = ko.observable();
        self.WorkoutId = ko.observable(@workoutId);
        self.Reps = ko.observable();
        self.Sets = ko.observable();
        self.ResistanceId = ko.observable();
        self.Resistance = ko.observable();
        self.UnitId = ko.observable();
        self.Unit = ko.observable();
        self.Note = ko.observable();
    }

    function RoutineViewModel2(objectid) {
        var self = this;
        self.Id = ko.observable();
        self.DocumentId = ko.observable();
        self.CategoryId = ko.observable();
        self.ExerciseId = ko.observable();
        self.UserId = ko.observable();
        self.UserType = ko.observable();
        self.ObjectId = ko.observable(objectid);
        self.ObjectType = ko.observable();
        self.StateId = ko.observable();
        self.State = ko.observable();
        self.Exercise = ko.observable();
        self.CreatedDate = ko.observable();
        self.StartedDate = ko.observable();
        self.CompletedDate = ko.observable();
        self.CanceledDate = ko.observable();
        self.SortOrder = ko.observable();
        self.Reps = ko.observable();
        self.Sets = ko.observable();
        self.Resistance = ko.observable();
        self.UnitId = ko.observable();
        self.Unit = ko.observable();
        self.Note = ko.observable();
        self.exercises = ko.observableArray();
        self.CategoryId.subscribe(function() {
            $.get('/api/member/GetExerciseByCategory', { categoryid: self.CategoryId() }, function(data) {
                self.exercises(data);
            });
            self.ExerciseId(undefined);
        });
    }
    
    function Model2(objectid) {
        var self = this;
        self.Routine = new RoutineViewModel2(objectid);
        self.Stories = ko.observableArray();
        self.addStory = function(trainingid) {
            self.Stories.push(new StoryViewModel2(trainingid));
        };
        self.deleteStory = function(story) {
            self.Stories.remove(story);
        };
        self.filterStory = function(trainingid) {
            return ko.utils.arrayFilter(self.Stories(), function(story) {
                return (story.TrainingId() == trainingid);
            });
        };
    }

    function RoutinesViewModel2() {
        var self = this;
        self.routines = ko.observableArray();
        self.supersets = ko.observableArray();
        self.newRoutines = ko.observableArray();
        self.categories = ko.observableArray();
        self.types = ko.observableArray();
        self.units = ko.observableArray();
        self.actions = ko.observableArray();
        self.trainings = ko.observableArray();
        self.resistances = ko.observableArray();
        self.superset = new SuperSetViewModel2();
        //self.routine = new RoutineViewModel();
        self.addRoutine = function(objectid) {
            self.newRoutines.push(new Model2(objectid));
        };
        self.saveRoutine = function() {
            var items = ko.toJS(self.newRoutines);
            var mappedItems = ko.utils.arrayMap(items, function(item) {
                delete item.exercises;
                return item;
            });

            $.ajax({
                type: "POST",
                async: false,
                //cache: false,
                url: '/api/member/InsertRoutinesSuperSet',
                data: ko.toJSON(mappedItems),
                //dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    self.getSuperSet();
                    self.closeModal();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Error: ' + xhr.status + ' ' + xhr.statusText);
                }
            });
        };
        self.editRoutine = function(routine) {
            alert(ko.toJSON(routine));
            $.get('/api/member/GetExerciseByCategory', { categoryid: routine.Routine.Exercise.CategoryId }, function(data) {
                self.newRoutines.removeAll();
                var item = new Model2(routine.Routine.ObjectId);
                item.Routine.Id(routine.Routine.Id);
                item.Routine.CategoryId(routine.Routine.Exercise.CategoryId);
                item.Routine.exercises(data);
                item.Routine.ExerciseId(routine.Routine.Exercise.Id);
                item.Routine.Resistance(routine.Routine.Resistance);
                item.Routine.UnitId(routine.Routine.UnitId);
                item.Routine.Sets(routine.Routine.Sets);
                item.Routine.Reps(routine.Routine.Reps);
                item.Routine.Note(routine.Routine.Note);

                self.newRoutines.push(item);
                $('.saveroutinesuperset').hide();
                $('.updateroutinesuperset').show();
                $("#dialog-routinesuperset").dialog({ title: "Edit Routine" });
                self.openModal(undefined);
            });
        };
        self.deleteRoutine = function(routine) {
            $.post('/api/member/DeleteRoutine/' + routine.Routine.Id , function (data) {
                self.getSuperSet();
            });
        };
        self.updateRoutine = function() {
            var items = ko.toJS(self.newRoutines);
            var mappedItems = ko.utils.arrayMap(items, function(item) {
                delete item.exercises;
                return item;
            });
            $.post('/api/member/UpdateRoutine',  mappedItems[0].Routine, function (data) {
                self.getSuperSet();
                self.closeModal();
            });
        };
        self.getRoutine = function(id) {
            $.ajax({
                type: "GET",
                async: false,
                //cache: false,
                url: '/api/member/GetRoutineByWorkout/' + id,
                //data: { id: memberId },
                //dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    self.routines(data);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Error: ' + xhr.status + ' ' + xhr.statusText);
                }
            });
        };
        self.getDropdown = function() {
            $.get('/api/member/GetUmbracoPreValue', { id: 1068 }, function(data) {
                self.categories(data);
            });
            $.get('/api/member/GetUmbracoPreValue', { id: 1074 }, function(data) {
                self.types(data);
            });
            $.get('/api/member/GetUmbracoPreValue', { id: 1075 }, function(data) {
                self.units(data);
            });
            $.get('/api/member/GetUmbracoPreValue', { id: 1067 }, function(data) {
                self.actions(data);
            });
            $.get('/api/member/GetUmbracoPreValue', { id: 1073 }, function(data) {
                self.trainings(data);
            });
            $.get('/api/member/GetUmbracoPreValue', { id: 1071 }, function(data) {
                self.resistances(data);
            });
        };
        self.openModal = function(superset) {
            if (superset != undefined) {
                self.addRoutine(superset.SuperSet.Id);
            }
            $("#dialog-routinesuperset").dialog("open");
        };
        self.closeModal = function() {
            $("#dialog-routinesuperset").dialog("close");
        };
        
        //--------------------------------SUPERSET------------------------------------------
        self.getSuperSet = function() {
            $.ajax({
                type: "GET",
                async: false,
                url: '/api/member/GetSuperSetByWorkout/' + @workoutId,
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    $.each(data, function( index, element) {
                        element.IsHide = ko.observable(true);
                    });
                    self.supersets(data);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Error: ' + xhr.status + ' ' + xhr.statusText);
                }
            });
        };
        self.saveSuperSet = function() {
            $.ajax({
                type: "POST",
                async: false,
                //cache: false,
                url: '/api/member/InsertSuperSet',
                data: ko.toJSON(self.superset),
                //dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    self.getSuperSet();
                    self.closeModalSuperSet();
                },
                error: function(xhr, ajaxOptions, thrownError) {
                    alert('Error: ' + xhr.status + ' ' + xhr.statusText);
                }
            });
        };
        self.editSuperSet = function(superset) {
            self.superset.Id(superset.SuperSet.Id);
            self.superset.WorkoutId(superset.SuperSet.WorkoutId);
            self.superset.Reps(superset.SuperSet.Reps);
            self.superset.Sets(superset.SuperSet.Sets);
            self.superset.ResistanceId(superset.SuperSet.ResistanceId);
            //self.superset.Resistance(superset.SuperSet.Resistance);
            self.superset.UnitId(superset.SuperSet.UnitId);
            //self.superset.Unit(superset.SuperSet.Unit);
            self.superset.Note(superset.SuperSet.Note);
            $('.savesuperset').hide();
            $('.updatesuperset').show();
            $("#dialog-superset").dialog({ title: "Edit SuperSet" });
            self.openModalSuperSet();
        };
        self.deleteSuperSet = function(superset) {
            $.post('/api/member/DeleteSuperSet/' + superset.SuperSet.Id, function (data) {
                self.getSuperSet();
            });
        };
        self.updateSuperSet = function() {
             $.post('/api/member/UpdateSuperSet',  ko.toJS(self.superset), function (data) {
                self.getSuperSet();
                self.closeModalSuperSet();
            });
        };
        self.openModalSuperSet = function() {
            $("#dialog-superset").dialog("open");
        };
        self.closeModalSuperSet = function() {
            $("#dialog-superset").dialog("close");
        };
        self.showRoutine = function(superset) {
            superset.IsHide(false);
        };
        self.hideRoutine = function(superset) {
            superset.IsHide(true);
        };
    }




    $(document).ready(function() {

        var model2 = new RoutinesViewModel2();
        //ko.applyBindings(model2, $('#content-routine')[0]);
        ko.applyBindings(model2, $('#content-superset')[0]);
        //ko.applyBindings(model2);
        model2.getDropdown();
        model2.getSuperSet();
        //model2.getRoutine();

        $("#dialog-superset").dialog({
            autoOpen: false,
            resizable: false,
            dialogClass: 'supersetform',
            height: 350,
            width: 300,
            title: 'Add SuperSet',
            modal: true,
            buttons: {
                "Update": function() {
                    model2.updateSuperSet();
                },
                "Save": function() {
                    model2.saveSuperSet();
                },
                Cancel: function() {
                    $(this).dialog("close");
                }
            }
            //close: function(event, ui) {
        //model.newRoutines.removeAll();
            //model.addRoutine();
            //$( "#dialog-routine" ).dialog({ title: "Add Routine" });
            //}
        });

    $("#dialog-routinesuperset").dialog({
        autoOpen: false,
        resizable: false,
        dialogClass: 'routineformsuperset',
        height: 440,
        width: 'auto',
        title: 'Add Routine',
        modal: true,
        buttons: {
            "Update": function() {
                model2.updateRoutine();
            },
            "Save": function() {
                model2.saveRoutine();
            },
            Cancel: function() {
                $(this).dialog("close");
            }
        }
        //close: function(event, ui) {
        //model.newRoutines.removeAll();
            //model.addRoutine();
            //$( "#dialog-routine" ).dialog({ title: "Add Routine" });
            //}
    });

        $('.supersetform .ui-dialog-buttonset').find('span').each(function(index, element) {
            if (element.innerHTML == "Save") {
                $(element).parent().attr('data-bind', 'click: $root.saveSuperSet');
                $(element).parent().addClass('savesuperset');
            } else if (element.innerHTML == "Update") {
                $(element).parent().attr('data-bind', 'click: $root.updateSuperSet');
                $(element).parent().addClass('updatesuperset');
                $(element).parent().hide();
            }
        });

    $('.routineformsuperset .ui-dialog-buttonset').find('span').each(function(index, element) {
        if (element.innerHTML == "Save") {
            $(element).parent().attr('data-bind', 'click: $root.saveRoutine');
            $(element).parent().addClass('saveroutinesuperset');
        } else if (element.innerHTML == "Update") {
            $(element).parent().attr('data-bind', 'click: $root.updateRoutine');
            $(element).parent().addClass('updateroutinesuperset');
            $(element).parent().hide();
        }
    });

        $("#dialog-superset").on("dialogclose", function(event, ui) {
            model2.superset.Id(undefined);
            model2.superset.WorkoutId(undefined);
            model2.superset.Reps(undefined);
            model2.superset.Sets(undefined);
            model2.superset.ResistanceId(undefined);
            model2.superset.Resistance(undefined);
            model2.superset.UnitId(undefined);
            model2.superset.Unit(undefined);
            model2.superset.Note(undefined);
            $('.savesuperset').show();
            $('.updatesuperset').hide();
            $("#dialog-superset").dialog({ title: "Add SuperSet" });
        });
        
        $("#dialog-routinesuperset").on("dialogclose", function(event, ui) {
            model2.newRoutines.removeAll();
            //model2.addRoutine();
            $('.saveroutinesuperset').show();
            $('.updateroutinesuperset').hide();
            $( "#dialog-routinesuperset" ).dialog({ title: "Add Routine" });
        });
    });

</script>
