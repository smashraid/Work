@using umbraco.BusinessLogic
@using umbraco.cms.businesslogic.web
@inherits Umbraco.Web.Mvc.UmbracoTemplatePage

@{
    var id = Request.QueryString["id"];
    Document workout = new Document(Convert.ToInt32(1142));
    int workoutId = workout.Id;
    User user = umbraco.BusinessLogic.User.GetCurrent();
    user = new User(0);
    Dictionary<string, string> model = new Dictionary<string, string>
        {
            {"gymnastid", workout.ParentId.ToString()},
            {"memberid", user.Id.ToString()},
            {"workoutid", id},
            {"workouttitle", workout.Text}
        };
}
<style>
    body
    {
        font-size: 62.5%;
    }
    label, input
    {
        display: block;
    }
    input.text
    {
        margin-bottom: 12px;
        width: 95%;
        padding: .4em;
    }
    fieldset
    {
        padding: 0;
        border: 0;
        margin-top: 25px;
    }
    h1
    {
        font-size: 1.2em;
        margin: .6em 0;
    }
    div#content-routine
    {
        width: 350px;
        margin: 20px 0;
    }
    div#content-routine table
    {
        margin: 1em 0;
        border-collapse: collapse;
        width: 100%;
    }
    div#content-routine table td, div#content-routine table th
    {
        border: 1px solid #eee;
        padding: .6em 10px;
        text-align: left;
    }
    .ui-dialog .ui-state-error
    {
        padding: .3em;
    }
    .validateTips
    {
        border: 1px solid transparent;
        padding: 0.3em;
    }
       .inlineField {
        float: left; 
        display: inline
    }
</style>

    <div id="content-routine" class="ui-widget">
        <h1>@workout.Text</h1>
        <table id="users" class="ui-widget ui-widget-content">
            <caption>

                <button class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-primary" data-bind="click: openModal">
                    <span class="ui-button-icon-primary ui-icon ui-icon-plus"></span>
                    <span class="ui-button-text">Add</span>
                </button>
                <button class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-icon-primary" data-bind="click: getRoutine">
                    <span class="ui-button-icon-primary ui-icon ui-icon-refresh"></span>
                    <span class="ui-button-text">Refresh</span>
                </button>
            </caption>
            <thead>
                <tr class="ui-widget-header ">
                    <th>
                        Id
                    </th>
                    <th>
                        Exercise
                    </th>
                    <th>
                        Sets
                    </th>
                    <th>
                        Reps
                    </th>
                    <th>
                        Resistance
                    </th>
                    <th>
                        Unit
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody data-bind="foreach: routines">
                <tr>
                    <td data-bind="text: Id">
                    </td>
                    <td data-bind="text: Exercise.ExerciseName">
                    </td>
                    <td data-bind="text: Sets">
                    </td>
                    <td data-bind="text: Reps">
                    </td>
                    <td data-bind="text: Resistance">
                    </td>
                    <td data-bind="text: Unit">
                    </td>
                    <td>
                        <button type="button" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only"
                                title="Edit" data-bind="click: $root.editRoutine">
                            <i class="ui-icon ui-icon-pencil"></i>
                        </button>
                        <button type="button" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only"
                                title="Delete" data-bind="click: $root.deleteRoutine">
                            <i class="ui-icon ui-icon-trash"></i>
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>

    </div>
                            <div id="dialog-routine">
        <form data-bind="submit: saveRoutine">
            <fieldset>
                <legend></legend>
                <div data-bind="foreach: newRoutines">
                    <label>
                        Category</label>
                    <select data-bind='options: $root.categories, optionsText: "Value", optionsValue: "Id", optionsCaption: "Select...", value: Routine.CategoryId, uniqueName: true'>
                    </select>
                    <input type="hidden" data-bind="text: Routine.Id" />
                    <label>
                        Exercise</label>
                    <select data-bind='options: Routine.exercises, optionsText: "ExerciseName", optionsValue: "Id", optionsCaption: "Select...", value: Routine.ExerciseId, uniqueName: true'>
                    </select>
                    <label>
                        Resistance</label>
                    <input type="text" class="inlineField" data-bind="value: Routine.Resistance" />
                    <select data-bind='options: $root.units, optionsText: "Value", optionsValue: "Id", optionsCaption: "...", value: Routine.UnitId' >
                    </select>
                    <label>
                        Sets</label>
                    <input type="text" data-bind="value: Routine.Sets" />
                    <label>
                        Reps</label>
                    <input type="text" data-bind="value: Routine.Reps" />
                    <label>
                        Note</label>
                    <textarea placeholder="Note" rows="5" cols="30" data-bind="value: Routine.Note"></textarea>
                </div>
            </fieldset>
        </form>
    </div>


@*<link href="/css/ui/jquery.ui.css" rel="stylesheet" type="text/css" />
<script src="/scripts/jquery.js" type="text/javascript"></script>
<script src="/scripts/jquery.ui.js" type="text/javascript"></script>
<script src="/scripts/knockout.js" type="text/javascript"></script>
<script src="/scripts/knockout.mapping.js" type="text/javascript"></script>*@
<script type="text/javascript">
    $("#dialog-routine").dialog({
        autoOpen: false,
        resizable: false,
        height: 440,
        width: 300,
        title: 'Add Routine',
        modal: true,
        buttons: {
            "Update": function() {
            },
            "Save": function() {
            },
            Cancel: function() {
                $(this).dialog("close");
            }
        }
        //close: function(event, ui) {
        //model.newRoutines.removeAll();
            //model.addRoutine();
            //$( "#dialog-routine" ).dialog({ title: "Add Routine" });
            //}
    });

    $('.ui-dialog-buttonset').find('span').each(function(index, element) {
        if (element.innerHTML == "Save") {
            $(element).parent().attr('data-bind', 'click: $root.saveRoutine');
            $(element).parent().addClass('saveroutine');
        } else if (element.innerHTML == "Update") {
            $(element).parent().attr('data-bind', 'click: $root.updateRoutine');
            $(element).parent().addClass('updateroutine');
            $(element).parent().hide();
        }
    });

    function StoryViewModel(trainingid) {
        var self = this;
        self.Id = ko.observable();
        self.ActionId = ko.observable();
        self.Action = ko.observable();
        self.TrainingId = ko.observable(trainingid);
        self.Training = ko.observable();
        self.UnitId = ko.observable();
        self.Unit = ko.observable();
        self.ObjectId = ko.observable();
        self.ObjectType = ko.observable();
        self.Value = ko.observable();
        self.TypeId = ko.observable();
        self.Type = ko.observable();
        self.UserId = ko.observable();
        self.UserType = ko.observable();
        self.Note = ko.observable();
        self.CreatedDate = ko.observable();
        self.UpdatedDate = ko.observable();
    }

    function SuperSetViewModel() {
        var self = this;
        self.Id = ko.observable();
        self.WorkoutId = ko.observable();
        self.Reps = ko.observable();
        self.Sets = ko.observable();
        self.ResistanceId = ko.observable();
        self.Resistance = ko.observable();
        self.UnitId = ko.observable();
        self.Unit = ko.observable();
        self.Note = ko.observable();
    }

    function RoutineViewModel() {
        var self = this;
        self.Id = ko.observable();
        self.DocumentId = ko.observable();
        self.CategoryId = ko.observable();
        self.ExerciseId = ko.observable();
        self.UserId = ko.observable();
        self.UserType = ko.observable();
        self.ObjectId = ko.observable(@workoutId);
        self.ObjectType = ko.observable();
        self.StateId = ko.observable();
        self.State = ko.observable();
        self.Exercise = ko.observable();
        self.CreatedDate = ko.observable();
        self.StartedDate = ko.observable();
        self.CompletedDate = ko.observable();
        self.CanceledDate = ko.observable();
        self.SortOrder = ko.observable();
        self.Reps = ko.observable();
        self.Sets = ko.observable();
        self.Resistance = ko.observable();
        self.UnitId = ko.observable();
        self.Unit = ko.observable();
        self.Note = ko.observable();
        self.exercises = ko.observableArray();
        self.CategoryId.subscribe(function() {
            $.get('/api/member/GetExerciseByCategory', { categoryid: self.CategoryId() }, function(data) {
                self.exercises(data);
            });
            self.ExerciseId(undefined);
        });
    }
    
    function Model() {
        var self = this;
        self.Routine = new RoutineViewModel();
        self.Stories = ko.observableArray();
        self.addStory = function(trainingid) {
            self.Stories.push(new StoryViewModel(trainingid));
        };
        self.deleteStory = function(story) {
            self.Stories.remove(story);
        };
        self.filterStory = function(trainingid) {
            return ko.utils.arrayFilter(self.Stories(), function(story) {
                return (story.TrainingId() == trainingid);
            });
        };
    }

    function RoutinesViewModel() {
        var self = this;
        self.routines = ko.observableArray();
        self.newRoutines = ko.observableArray([new Model()]);
        self.categories = ko.observableArray();
        self.superset = ko.observable();
        self.types = ko.observableArray();
        self.units = ko.observableArray();
        self.actions = ko.observableArray();
        self.trainings = ko.observableArray();
        self.IsEdit = ko.observable(false);
        //self.routine = new RoutineViewModel();
        self.addRoutine = function() {
            self.newRoutines.push(new Model());
        };
        self.saveRoutine = function() {
            var items = ko.toJS(self.newRoutines);
            var mappedItems = ko.utils.arrayMap(items, function(item) {
                delete item.exercises;
                return item;
            });

            $.ajax({
                type: "POST",
                async: false,
                //cache: false,
                url: '/api/member/InsertRoutines',
                data: ko.toJSON(mappedItems),
                //dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    self.getRoutine();
                    self.closeModal();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Error: ' + xhr.status + ' ' + xhr.statusText);
                }
            });
        };
        self.editRoutine = function(routine) {
            $.get('/api/member/GetExerciseByCategory', { categoryid: routine.Exercise.CategoryId }, function(data) {
                self.newRoutines.removeAll();
                var item = new Model();
//                item.Routine.Id = routine.Id;
//                item.Routine.CategoryId = routine.Exercise.CategoryId;
//                item.Routine.exercises = data;
//                item.Routine.ExerciseId = routine.Exercise.Id;
//                item.Routine.Resistance = routine.Resistance;
//                item.Routine.UnitId = routine.UnitId;
//                item.Routine.Sets = routine.Sets;
//                item.Routine.Reps = routine.Reps;
//                item.Routine.Note = routine.Note;

                item.Routine.Id(routine.Id);
                item.Routine.CategoryId(routine.Exercise.CategoryId);
                item.Routine.exercises(data);
                item.Routine.ExerciseId(routine.Exercise.Id);
                item.Routine.Resistance(routine.Resistance);
                item.Routine.UnitId(routine.UnitId);
                item.Routine.Sets(routine.Sets);
                item.Routine.Reps(routine.Reps);
                item.Routine.Note(routine.Note);

                self.newRoutines.push(item);
                self.IsEdit(true);
                $('.saveroutine').hide();
                $('.updateroutine').show();
                $("#dialog-routine").dialog({ title: "Edit Routine" });
                self.openModal();
            });
        };
        self.deleteRoutine = function(routine) {
            $.post('/api/member/DeleteRoutine/' + routine.Id , function (data) {
               self.getRoutine();
            });
        };
        self.updateRoutine = function() {
            var items = ko.toJS(self.newRoutines);
            var mappedItems = ko.utils.arrayMap(items, function(item) {
                delete item.exercises;
                return item;
            });
            $.post('/api/member/UpdateRoutine',  mappedItems[0].Routine, function (data) {
                self.getRoutine();
                self.closeModal();
            });
        };
        self.getRoutine = function() {
            //$('#content-routine').ajaxLoading();
            $.ajax({
                type: "GET",
                async: false,
                //cache: false,
                url: '/api/member/GetRoutineByWorkout/' + @workoutId,
                //data: { id: memberId },
                //dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    self.routines(data);
                    var y = 1;
                    var z = 2;
                    //$('#content-routine').closeLoading();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Error: ' + xhr.status + ' ' + xhr.statusText);
                }
            });
        };
        self.getDropdown = function() {
            $.get('/api/member/GetUmbracoPreValue', { id: 1068 }, function(data) {
                self.categories(data);
            });
            $.get('/api/member/GetUmbracoPreValue', { id: 1074 }, function(data) {
                self.types(data);
            });
            $.get('/api/member/GetUmbracoPreValue', { id: 1075 }, function(data) {
                self.units(data);
            });
            $.get('/api/member/GetUmbracoPreValue', { id: 1067 }, function(data) {
                self.actions(data);
            });
            $.get('/api/member/GetUmbracoPreValue', { id: 1073 }, function(data) {
                self.trainings(data);
            });
        };
        self.openModal = function() {
            $("#dialog-routine").dialog("open");
        };
        self.closeModal = function() {
            $("#dialog-routine").dialog("close");
        };
    }


    $(document).ready(function() {

        var model = new RoutinesViewModel();
        //ko.applyBindings(model, $('#content-routine')[0]);
        //ko.applyBindings(model, $('#template-routine')[0]);
        ko.applyBindings(model);
        model.getDropdown();
        model.getRoutine();

        $("#dialog-routine").on("dialogclose", function(event, ui) {
            model.newRoutines.removeAll();
            model.addRoutine();
            $('.saveroutine').show();
            $('.updateroutine').hide();
            $( "#dialog-routine" ).dialog({ title: "Add Routine" });
        });
    });    

</script>
