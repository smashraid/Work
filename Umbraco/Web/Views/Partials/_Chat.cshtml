@model Dictionary<string, string>
@{
    Dictionary<string, string> x = (Dictionary<string, string>)Model;
    string gymnastId = Model["gymnastid"];
    string memberId = Model["memberid"];
}
<div class="row-fluid" >
    <div id="content-chat" class="span10">
        <fieldset>
            <legend>Chat</legend>
            <div class="form-inline" data-bind="with: chat">
                <input type="text" name="subject" placeholder="Subject" value="" data-bind="value: Subject" />
                <button class="btn" data-bind="click: $root.saveChat, visible: !$root.IsEdit(), enable: Subject() != '', valueUpdate:'afterkeydown'" ><i class="icon-plus"></i></button>
                <button class="btn" data-bind="click: $root.getChat, visible: !$root.IsEdit()"><i class="icon-refresh"></i></button>
                <input type="hidden" name="Id" value=" " data-bind="text: Id" />
                <button class="btn" data-bind="click: $root.updateChat, visible: $root.IsEdit" ><i class="icon-ok"></i></button>
                <button class="btn" data-bind="click: $root.cancelChat, visible: $root.IsEdit"><i class="icon-remove"></i></button>
            </div>
            <br/>
       </fieldset>
            <ul class="thumbnails" data-bind="foreach: chats">
                <li class="span4">
                    <div class="thumbnail">
                        <div class="caption">
                            <h3 data-bind="text: Subject">
                            </h3>
                            <small data-bind="text: CreatedDate"></small>
                            <p></p>
                            <p>
                                <button class="btn" data-bind="click: $root.openTalk"><i class="icon-ok-sign"></i></button>
                                <button class="btn" data-bind="click: $root.editChat, visible: IsOwner"><i class="icon-pencil"></i></button>
                                <button class="btn" data-bind="click: $root.deleteChat, visible: IsOwner"><i class="icon-trash"></i></button>
                            </p>
                        </div>

                    </div>
                </li>
            </ul>
        
    </div>
</div>
<script src="/scripts/jquery.js" type="text/javascript"></script>
<script src="/scripts/knockout.js" type="text/javascript"></script>
<script type="text/javascript">
    function Paging() {
        var self = this;
        self.Id = ko.observable(@gymnastId);
        self.CurrentPage = ko.observable(1);
        self.Pagesize = ko.observable(10);
        self.Records = ko.observable();
        self.TotalPages = ko.observable();
    }

    function ChatViewModel(chat) {
        var self = this;
        self.Id = ko.observable(0);
        self.GymnastId = ko.observable(@gymnastId);
        self.Subject = ko.observable("");
        self.UserId = ko.observable();
        self.UserType = ko.observable();
        self.User = ko.observable();
        self.FirstName = ko.observable();
        self.LastName = ko.observable();
        self.CreatedDate = ko.observable();
        self.UpdatedDate = ko.observable();
        self.IsOwner = ko.observable();
        self.IsRead = ko.observable();
    }

    function ChatsViewModel() {
        var self = this;
        self.chats = ko.observableArray();
        self.paging = new Paging();
        self.chat = new ChatViewModel({});
        self.IsEdit = ko.observable(false);
        self.saveChat = function () {
            $.post('/api/member/InsertChat', { gymnastId: @gymnastId, subject: self.chat.Subject() }, function (data) {
                self.chats.unshift(data);
                self.chat.Subject("");
            });
        };
        self.editChat = function (chat) {
            self.chat.Subject(chat.Subject);
            self.chat.Id(chat.Id);
            self.IsEdit(true);
        };
        self.cancelChat = function () {
            self.chat.Subject("");
            self.chat.Id(0);
            self.IsEdit(false);
        };
        self.updateChat = function () {
            $.post('/api/member/UpdateChat', { Id: self.chat.Id(), GymnastId: self.chat.GymnastId(), Subject: self.chat.Subject() }, function (data) {
                self.getChat();
                self.cancelChat();
            });
        };
        self.deleteChat = function (chat) {
            $.post('/api/member/DeleteChat', { id: chat.Id }, function (data) {
                self.chats.remove(chat);
            });
        };
        self.getChat = function () {
             $('#content-chat').ajaxLoading();
            $.ajax({
                type: "GET",
                async: false,
                //cache: false,
                url: '/api/member/SelectChat',
                data: { paging: self.paging },
                //dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    //self.chats(ko.utils.arrayMap(data.Chats, function (chat) {
                    //    return new ChatViewModel(chat);
                    //}));
                    self.chats(data.Chats);
                    //self.paging(data.Paging);
                    console.log(data);
                     $('#content-chat').closeLoading();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Error: ' + xhr.status + ' ' + xhr.statusText);
                }
            });
        };
        self.openTalk = function (chat) {
            parent.right.document.location.href = '/template.aspx?view=talk&gymnastid=' + @gymnastId + '&memberid=' + @memberId + '&chatid=' + chat.Id + '&chattitle=' + chat.Subject;
        };
    }

    $(document).ready(function () {
        var model = new ChatsViewModel();
        ko.applyBindings(model, $('#content-chat')[0]);
        model.getChat();

        //ko.applyBindings(new ChatViewModel(undefined), $('#chat')[0]);
    });
</script>