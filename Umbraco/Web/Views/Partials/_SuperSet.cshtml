@using umbraco.BusinessLogic
@using umbraco.cms.businesslogic.web
@model Dictionary<string, string>
@{
    Dictionary<string, string> x = (Dictionary<string, string>)Model;
    string gymnastId = Model["gymnastid"];
    string memberId = Model["memberid"];
    string workoutId = Model["workoutid"];
    string workoutTitle = Model["workouttitle"];
}

<div id="content-superset">
    <div>
        <fieldset>
            <legend>SuperSet - @workoutTitle</legend>
            <div>
                <button class="btn" data-bind="click: openModalSuperSet">
                    <i class="icon-plus"></i>
                </button>
                <button class="btn" data-bind="click: getSuperSet">
                    <i class="icon-refresh"></i>
                </button>
            </div>
            <br/>
            <div class="row-fluid">
                <table class="table table-striped table-hover table-condensed">
                    <caption>
                    </caption>
                    <thead>
                        <tr>
                            <th>
                    
                            </th>
                            <th>
                                Sets
                            </th>
                            <th>
                                Reps
                            </th>
                            <th>
                                Resistance
                            </th>
                            <th>
                                Unit
                            </th>
                            <th>
                            </th>
                        </tr>
                    </thead>
                    <tbody data-bind="foreach: supersets">
                        <tr>
                            <td >
                                <span data-bind="value: IsHide"></span>
                                <a href="#" data-bind="click: $root.showRoutine, visible: IsHide"> <i class="icon-chevron-right"></i></a>
                                <a href="#" data-bind="click: $root.hideRoutine, visible: !IsHide()"><i class="icon-chevron-down"></i></a>
                            </td>
                            <td data-bind="text: SuperSet.Sets">
                            </td>
                            <td data-bind="text: SuperSet.Reps">
                            </td>
                            <td data-bind="text: SuperSet.Resistance">
                            </td>
                            <td data-bind="text: SuperSet.Unit">
                            </td>
                            <td>
                                <button type="button" class="btn" title="Edit" data-bind="click: $root.editSuperSet">
                                    <i class="icon-pencil"></i>
                                </button>
                                <button type="button" class="btn" title="Delete" data-bind="click: $root.deleteSuperSet">
                                    <i class="icon-trash"></i>
                                </button>
                                <button type="button" class="btn" title="Add Routine" data-bind="click: $root.openModal">
                                    <i class="icon-plus"></i>
                                </button>
                            </td>  
                        </tr>  
                        <tr data-bind="visible: !IsHide()">
                            <td> <i class="ui-icon ui-icon-arrowreturnthick-1-e"></i> </td>     
                            <td colspan="5">
                                <div >
                                    <table class="table table-striped table-hover table-condensed">
                                        <caption>
                                        </caption>
                                        <thead>
                                            <tr >
                                                <th>
                                                    Id
                                                </th>
                                                <th>
                                                    Exercise
                                                </th>
                                                <th>
                                                    Sets
                                                </th>
                                                <th>
                                                    Reps
                                                </th>
                                                <th>
                                                    Resistance
                                                </th>
                                                <th>
                                                    Unit
                                                </th>
                                                <th>
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody data-bind="foreach: Routines">
                                            <tr>
                                                <td data-bind="text: Routine.Id">
                                                </td>
                                                <td data-bind="text: Routine.Exercise.ExerciseName">
                                                </td>
                                                <td data-bind="text: Routine.Sets">
                                                </td>
                                                <td data-bind="text: Routine.Reps">
                                                </td>
                                                <td data-bind="text: Routine.Resistance">
                                                </td>
                                                <td data-bind="text: Routine.Unit">
                                                </td>
                                                <td>
                                                    <button type="button" class="btn" title="Edit" data-bind="click: $root.editRoutine">
                                                        <i class="icon-pencil"></i>
                                                    </button>
                                                    <button type="button" class="btn" title="Delete" data-bind="click: $root.deleteRoutine">
                                                        <i class="icon-trash"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </fieldset>
    </div>
    <!-- Modal Routine SuperSet -->
    <div id="modal-routinesuperset" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
            <h3 data-bind="if: !$root.IsEditRoutine()" >Add Routine</h3>
            <h3 data-bind="if: $root.IsEditRoutine()" >Edit Routine</h3>
        </div>
        <form data-bind="submit: saveRoutine">
            <div class="modal-body" data-bind="foreach: newRoutines">
                <div class="row-fluid">
                    <div class="span6">
                        <div class="control-group">
                            <label class="control-label" >
                                Category</label>
                            <div class="controls">
                                <select data-bind='options: $root.categories, optionsText: "Value", optionsValue: "Id", optionsCaption: "Select...", value: Routine.CategoryId, uniqueName: true'>
                                </select> 
                                <input type="hidden" data-bind="text: Routine.Id" />
                            </div>
                        </div>
                        <div class="control-group">
                            <label class="control-label" >
                                Exercise</label>
                            <div class="controls">
                                <select data-bind='options: Routine.exercises, optionsText: "ExerciseName", optionsValue: "Id", optionsCaption: "Select...", value: Routine.ExerciseId, uniqueName: true'>
                                </select>   
                            </div>
                        </div>
                        <div class="control-group">
                            <label class="control-label" >
                                Resistance</label>
                            <div class="controls">
                                <input type="text" data-bind="value: Routine.Resistance" class="inlineField" />
                                <select data-bind='options: $root.units, optionsText: "Value", optionsValue: "Id", optionsCaption: "...", value: Routine.UnitId' >
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="span6">
                        <div class="control-group">
                            <label class="control-label">
                                Sets
                            </label>
                            <div class="controls">
                                <input type="text" data-bind="value: Routine.Sets" />
                            </div>
                        </div>
                        <div class="control-group">
                            <label class="control-label" >
                                Reps</label>
                            <div class="controls">
                                <input type="text" data-bind="value: Routine.Reps" />
                            </div>
                        </div>

                        <div class="control-group">
                            <label class="control-label">
                                Note</label>
                            <div class="controls">
                                <textarea placeholder="Note" rows="5" cols="5" data-bind="value: Routine.Note"></textarea>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
             <div class="modal-footer">
                 <button class="btn btn-success" type="button" data-bind="click: $root.addRoutine">Add</button>
                 <button class="btn btn-success" type="button" data-bind="click: $root.updateRoutine, visible: $root.IsEditRoutine">Update</button>
                <button class="btn" type="button" data-dismiss="modal" aria-hidden="true">Close</button>
                <button class="btn btn-primary" type="submit" data-bind="visible: !$root.IsEditRoutine()">Save</button>
            </div>
        </form>
    </div>
    <!-- Modal SuperSet-->
    <div id="modal-superset" class="modal hide fade" tabindex="-2" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
         <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
             <h3 data-bind="if: !$root.IsEditSuperSet()" >Add SuperSet</h3>
            <h3 data-bind="if: $root.IsEditSuperSet()" >Edit SuperSet</h3>
        </div>
        <form data-bind="submit: saveSuperSet">
            
            <div class="modal-body" data-bind="with: superset">
                <div class="row-fluid">
                    <div class="control-group">
                        <label class="control-label" >
                            Resistance</label>
                        <div class="controls">
                            <select data-bind='options: $root.resistances, optionsText: "Value", optionsValue: "Id", optionsCaption: "...", value: ResistanceId'>
                            </select>
                            <select data-bind='options: $root.units, optionsText: "Value", optionsValue: "Id", optionsCaption: "...", value: UnitId'>
                            </select>
                        </div>
                    </div>
                    <div class="control-group">
                        <label class="control-label" >
                            Sets</label>
                        <div class="controls">
                            <input type="text" data-bind="value: Sets" />
                        </div>
                    </div>
                    <div class="control-group">
                        <label class="control-label" >
                            Reps</label>
                        <div class="controls">
                            <input type="text" data-bind="value: Reps" />
                        </div>
                    </div>
                    <div class="control-group">
                        <label class="control-label" >
                            Note</label>
                        <div class="controls">
                            <textarea placeholder="Note" rows="5" cols="5" data-bind="value: Note"></textarea>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-success" type="button" data-bind="click: $root.updateSuperSet, visible: $root.IsEditSuperSet">Update</button>
                <button class="btn btn-primary" type="submit" data-bind="visible: !$root.IsEditSuperSet()">Save</button>
                <button class="btn" type="button" data-dismiss="modal" aria-hidden="true">Close</button>
            </div>
        </form>
    </div>
</div>

<script src="/scripts/jquery.js" type="text/javascript"></script>
<script src="/scripts/knockout.js" type="text/javascript"></script>
<script src="/scripts/knockout.mapping.js" type="text/javascript"></script>
<script type="text/javascript">
    function StoryViewModel2(trainingid) {
        var self = this;
        self.Id = ko.observable();
        self.ActionId = ko.observable();
        self.Action = ko.observable();
        self.TrainingId = ko.observable(trainingid);
        self.Training = ko.observable();
        self.UnitId = ko.observable();
        self.Unit = ko.observable();
        self.ObjectId = ko.observable();
        self.ObjectType = ko.observable();
        self.Value = ko.observable();
        self.TypeId = ko.observable();
        self.Type = ko.observable();
        self.UserId = ko.observable();
        self.UserType = ko.observable();
        self.Note = ko.observable();
        self.CreatedDate = ko.observable();
        self.UpdatedDate = ko.observable();
    }

    function SuperSetViewModel2() {
        var self = this;
        self.Id = ko.observable();
        self.WorkoutId = ko.observable(@workoutId);
        self.Reps = ko.observable();
        self.Sets = ko.observable();
        self.ResistanceId = ko.observable();
        self.Resistance = ko.observable();
        self.UnitId = ko.observable();
        self.Unit = ko.observable();
        self.Note = ko.observable();
    }

    function RoutineViewModel2(objectid) {
        var self = this;
        self.Id = ko.observable();
        self.DocumentId = ko.observable();
        self.CategoryId = ko.observable();
        self.ExerciseId = ko.observable();
        self.UserId = ko.observable();
        self.UserType = ko.observable();
        self.ObjectId = ko.observable(objectid);
        self.ObjectType = ko.observable();
        self.StateId = ko.observable();
        self.State = ko.observable();
        self.Exercise = ko.observable();
        self.CreatedDate = ko.observable();
        self.StartedDate = ko.observable();
        self.CompletedDate = ko.observable();
        self.CanceledDate = ko.observable();
        self.SortOrder = ko.observable();
        self.Reps = ko.observable();
        self.Sets = ko.observable();
        self.Resistance = ko.observable();
        self.UnitId = ko.observable();
        self.Unit = ko.observable();
        self.Note = ko.observable();
        self.exercises = ko.observableArray();
        self.CategoryId.subscribe(function() {
            $.get('/api/member/GetExerciseByCategory', { categoryid: self.CategoryId() }, function(data) {
                self.exercises(data);
            });
            self.ExerciseId(undefined);
        });
    }
    
    function Model2(objectid) {
        var self = this;
        self.Routine = new RoutineViewModel2(objectid);
        self.Stories = ko.observableArray();
        self.addStory = function(trainingid) {
            self.Stories.push(new StoryViewModel2(trainingid));
        };
        self.deleteStory = function(story) {
            self.Stories.remove(story);
        };
        self.filterStory = function(trainingid) {
            return ko.utils.arrayFilter(self.Stories(), function(story) {
                return (story.TrainingId() == trainingid);
            });
        };
    }

    function RoutinesViewModel2() {
        var self = this;
        self.routines = ko.observableArray();
        self.supersets = ko.observableArray();
        self.newRoutines = ko.observableArray();
        self.categories = ko.observableArray();
        self.types = ko.observableArray();
        self.units = ko.observableArray();
        self.actions = ko.observableArray();
        self.trainings = ko.observableArray();
        self.resistances = ko.observableArray();
        self.superset = new SuperSetViewModel2();
        self.IsEditRoutine = ko.observable(false);
        self.IsEditSuperSet = ko.observable(false);
        //self.routine = new RoutineViewModel();
        self.addRoutine = function(objectid) {
            self.newRoutines.push(new Model2(objectid));
        };
        self.saveRoutine = function() {
            var items = ko.toJS(self.newRoutines);
            var mappedItems = ko.utils.arrayMap(items, function(item) {
                delete item.exercises;
                return item;
            });

            $.ajax({
                type: "POST",
                async: false,
                //cache: false,
                url: '/api/member/InsertRoutinesSuperSet',
                data: ko.toJSON(mappedItems),
                //dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    self.getSuperSet();
                    self.closeModal();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Error: ' + xhr.status + ' ' + xhr.statusText);
                }
            });
        };
        self.editRoutine = function(routine) {
            //alert(ko.toJSON(routine));
            $.get('/api/member/GetExerciseByCategory', { categoryid: routine.Routine.Exercise.CategoryId }, function(data) {
                self.newRoutines.removeAll();
                var item = new Model2(routine.Routine.ObjectId);
                item.Routine.Id(routine.Routine.Id);
                item.Routine.CategoryId(routine.Routine.Exercise.CategoryId);
                item.Routine.exercises(data);
                item.Routine.ExerciseId(routine.Routine.Exercise.Id);
                item.Routine.Resistance(routine.Routine.Resistance);
                item.Routine.UnitId(routine.Routine.UnitId);
                item.Routine.Sets(routine.Routine.Sets);
                item.Routine.Reps(routine.Routine.Reps);
                item.Routine.Note(routine.Routine.Note);

                self.newRoutines.push(item);
                self.openModal(undefined);
                self.IsEditRoutine(true);
            });
        };
        self.deleteRoutine = function(routine) {
            $.post('/api/member/DeleteRoutine/' + routine.Routine.Id , function (data) {
                self.getSuperSet();
            });
        };
        self.updateRoutine = function() {
            var items = ko.toJS(self.newRoutines);
            var mappedItems = ko.utils.arrayMap(items, function(item) {
                delete item.exercises;
                return item;
            });
            $.post('/api/member/UpdateRoutine',  mappedItems[0].Routine, function (data) {
                self.getSuperSet();
                self.closeModal();
                self.IsEditRoutine(false);
            });
        };
        self.getRoutine = function(id) {
            $.ajax({
                type: "GET",
                async: false,
                //cache: false,
                url: '/api/member/GetRoutineByWorkout/' + id,
                //data: { id: memberId },
                //dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    self.routines(data);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Error: ' + xhr.status + ' ' + xhr.statusText);
                }
            });
        };
        self.getDropdown = function() {
            $.get('/api/member/GetUmbracoPreValue', { id: 1068 }, function(data) {
                self.categories(data);
            });
            $.get('/api/member/GetUmbracoPreValue', { id: 1074 }, function(data) {
                self.types(data);
            });
            $.get('/api/member/GetUmbracoPreValue', { id: 1075 }, function(data) {
                self.units(data);
            });
            $.get('/api/member/GetUmbracoPreValue', { id: 1067 }, function(data) {
                self.actions(data);
            });
            $.get('/api/member/GetUmbracoPreValue', { id: 1073 }, function(data) {
                self.trainings(data);
            });
            $.get('/api/member/GetUmbracoPreValue', { id: 1071 }, function(data) {
                self.resistances(data);
            });
        };
        self.openModal = function(superset) {
            if (superset != undefined) {
                self.addRoutine(superset.SuperSet.Id);
            }
            self.IsEditRoutine(false);
            $('#modal-routinesuperset').modal('show');
        };
        self.closeModal = function() {
            $('#modal-routinesuperset').modal('hide');
        };
        
        //--------------------------------SUPERSET------------------------------------------
        self.getSuperSet = function() {
            $.ajax({
                type: "GET",
                async: false,
                url: '/api/member/GetSuperSetByWorkout/' + @workoutId,
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    $.each(data, function( index, element) {
                        element.IsHide = ko.observable(true);
                    });
                    self.supersets(data);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Error: ' + xhr.status + ' ' + xhr.statusText);
                }
            });
        };
        self.saveSuperSet = function() {
            $.ajax({
                type: "POST",
                async: false,
                //cache: false,
                url: '/api/member/InsertSuperSet',
                data: ko.toJSON(self.superset),
                //dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    self.getSuperSet();
                    self.closeModalSuperSet();
                },
                error: function(xhr, ajaxOptions, thrownError) {
                    alert('Error: ' + xhr.status + ' ' + xhr.statusText);
                }
            });
        };
        self.editSuperSet = function(superset) {
            self.superset.Id(superset.SuperSet.Id);
            self.superset.WorkoutId(superset.SuperSet.WorkoutId);
            self.superset.Reps(superset.SuperSet.Reps);
            self.superset.Sets(superset.SuperSet.Sets);
            self.superset.ResistanceId(superset.SuperSet.ResistanceId);
            //self.superset.Resistance(superset.SuperSet.Resistance);
            self.superset.UnitId(superset.SuperSet.UnitId);
            //self.superset.Unit(superset.SuperSet.Unit);
            self.superset.Note(superset.SuperSet.Note);
            self.openModalSuperSet();
            self.IsEditSuperSet(true);
        };
        self.deleteSuperSet = function(superset) {
            $.post('/api/member/DeleteSuperSet/' + superset.SuperSet.Id, function (data) {
                self.getSuperSet();
            });
        };
        self.updateSuperSet = function() {
             $.post('/api/member/UpdateSuperSet',  ko.toJS(self.superset), function (data) {
                self.getSuperSet();
                self.closeModalSuperSet();
                 self.IsEditSuperSet(false);
            });
        };
        self.openModalSuperSet = function() {
            self.IsEditSuperSet(false);
            $('#modal-superset').modal('show');
        };
        self.closeModalSuperSet = function() {
            $('#modal-superset').modal('hide');
        };
        self.showRoutine = function(superset) {
            superset.IsHide(false);
        };
        self.hideRoutine = function(superset) {
            superset.IsHide(true);
        };
    }
    
    $(document).ready(function() {

        var model2 = new RoutinesViewModel2();
        //ko.applyBindings(model2, $('#content-routine')[0]);
        ko.applyBindings(model2, $('#content-superset')[0]);
        //ko.applyBindings(model2);
        model2.getDropdown();
        model2.getSuperSet();
        //model2.getRoutine();

        $('#modal-routinesuperset').modal({
            keyboard: false,
            backdrop:false,
            show: false
        });

        $('#modal-routinesuperset').on('hidden', function() {
           model2.newRoutines.removeAll();
        });
        
        $('#modal-superset').modal({
            keyboard: false,
            backdrop:false,
            show: false
        });

        $('#modal-superset').on('hidden', function() {
            model2.superset.Id(undefined);
            model2.superset.WorkoutId(undefined);
            model2.superset.Reps(undefined);
            model2.superset.Sets(undefined);
            model2.superset.ResistanceId(undefined);
            model2.superset.Resistance(undefined);
            model2.superset.UnitId(undefined);
            model2.superset.Unit(undefined);
            model2.superset.Note(undefined);
        });
    });

</script>
